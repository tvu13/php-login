{"ts":1380896800963,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\n/**\n * handles the user registration\n * @author Panique <panique@web.de>\n */\nclass Registration\n{\n    // database connection\n    private $db_connection = null;\n    private $user_name = \"\";\n    private $user_email = \"\";\n    private $user_password = \"\";\n    private $user_password_hash = \"\";\n\n    public $registration_successful = false;\n    // collection of error messages\n    public $errors = array();\n    // collection of success / neutral messages\n    public $messages = array();\n\n    /**\n     * the function \"__construct()\" automatically starts whenever an object of this class is created,\n     * you know, when you do \"$login = new Login();\"\n     */\n    public function __construct()\n    {\n\n        if (isset($_POST[\"register\"])) {\n\n            $this->registerNewUser();\n\n        }\n    }\n\n    /**\n     * handles the entire registration process. checks all error possibilities, and creates a new user in the database if\n     * everything is fine\n     */\n    private function registerNewUser()\n    {\n\n        if (empty($_POST['user_name'])) {\n\n            $this->errors[] = \"Empty Username\";\n\n        } elseif (empty($_POST['user_password_new']) || empty($_POST['user_password_repeat'])) {\n\n            $this->errors[] = \"Empty Password\";\n\n        } elseif ($_POST['user_password_new'] !== $_POST['user_password_repeat']) {\n\n            $this->errors[] = \"Password and password repeat are not the same\";\n\n        } elseif (strlen($_POST['user_password_new']) < 6) {\n\n            $this->errors[] = \"Password has a minimum length of 6 characters\";\n\n        } elseif (strlen($_POST['user_name']) > 64 || strlen($_POST['user_name']) < 2) {\n\n            $this->errors[] = \"Username cannot be shorter than 2 or longer than 64 characters\";\n\n        } elseif (!preg_match('/^[a-z\\d]{2,64}$/i', $_POST['user_name'])) {\n\n            $this->errors[] = \"Username does not fit the name scheme: only a-Z and numbers are allowed, 2 to 64 characters\";\n\n        } elseif (empty($_POST['user_email'])) {\n\n            $this->errors[] = \"Email cannot be empty\";\n\n        } elseif (strlen($_POST['user_email']) > 64) {\n\n            $this->errors[] = \"Email cannot be longer than 64 characters\";\n\n        } elseif (!filter_var($_POST['user_email'], FILTER_VALIDATE_EMAIL)) {\n\n            $this->errors[] = \"Your email address is not in a valid email format\";\n\n        } elseif (!empty($_POST['user_name'])\n            && strlen($_POST['user_name']) <= 64\n            && strlen($_POST['user_name']) >= 2\n            && preg_match('/^[a-z\\d]{2,64}$/i', $_POST['user_name'])\n            && !empty($_POST['user_email'])\n            && strlen($_POST['user_email']) <= 64\n            && filter_var($_POST['user_email'], FILTER_VALIDATE_EMAIL)\n            && !empty($_POST['user_password_new'])\n            && !empty($_POST['user_password_repeat'])\n            && ($_POST['user_password_new'] === $_POST['user_password_repeat'])\n        ) {\n\n            // TODO: the above check is redundant, but from a developer's perspective it makes clear\n            // what exactly we want to reach to go into this if-block\n\n            // creating a database connection\n            $this->db_connection = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);\n\n            // if no connection errors (= working database connection)\n            if (!$this->db_connection->connect_errno) {\n\n                // escapin' this, additionally removing everything that could be (html/javascript-) code\n                $this->user_name = $this->db_connection->real_escape_string(htmlentities($_POST['user_name'], ENT_QUOTES));\n                $this->user_email = $this->db_connection->real_escape_string(htmlentities($_POST['user_email'], ENT_QUOTES));\n\n                $this->user_password = $_POST['user_password_new'];\n\n                // crypt the user's password with the PHP 5.5's password_hash() function, results in a 60 character hash string\n                // the PASSWORD_DEFAULT constant is defined by the PHP 5.5, or if you are using PHP 5.3/5.4, by the password hashing\n                // compatibility library                \n                $this->user_password_hash = password_hash($this->user_password, PASSWORD_DEFAULT);\n\n                // check if user already exists\n                $query_check_user_name = $this->db_connection->query(\"SELECT * FROM users WHERE user_name = '\" . $this->user_name . \"';\");\n\n                if ($query_check_user_name->num_rows == 1) {\n\n                    $this->errors[] = \"Sorry, that user name is already taken. Please choose another one.\";\n\n                } else {\n\n                    // write new users data into database\n                    $query_new_user_insert = $this->db_connection->query(\"INSERT INTO users (user_name, user_password_hash, user_email) VALUES('\" . $this->user_name . \"', '\" . $this->user_password_hash . \"', '\" . $this->user_email . \"');\");\n\n                    if ($query_new_user_insert) {\n\n                        $this->messages[] = \"Your account has been created successfully. You can now log in.\";\n                        $this->registration_successful = true;\n\n                    } else {\n\n                        $this->errors[] = \"Sorry, your registration failed. Please go back and try again.\";\n\n                    }\n                }\n\n            } else {\n\n                $this->errors[] = \"Sorry, no database connection.\";\n\n            }\n\n        } else {\n\n            $this->errors[] = \"An unknown error occurred.\";\n\n        }\n\n    }\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":5490}]],"length":5490}
